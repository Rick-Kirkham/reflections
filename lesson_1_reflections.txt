How did viewing a diff between two versions of a file help you see the bug that was introduced?
Logically, the bug had to be in a changed line, so by screening out the unchanged lines, I could find the problem faster.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Other than spotting bugs as in the above question, I don't see how it would make me more efficient. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pro: commits can be logical units of change, instead of arbitrary sets
Con: I might forget to commit. The Google approach ensures periodic saves

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git is oriented to projects that have multiple, but related, files. For Google docs, a project doesn't normally span more than one file.

How can you use the commands git log and git diff to view the history of files?
Git log lists the commits in the repo. Git diff compares two commits.

How might using version control make you more confident to make changes that could break something?
Experimentation is less risky because you can get back to where you were.

Now that you have your workspace set up, what do you want to try using Git for?
Version control in my samples projects at work.